#!/usr/bin/python
# -*- coding:utf-8 -*-
import logging
import daemonize
import time
import sys
import psycopg2
import json
from psycopg2.extras import DictCursor
from karel.kgrammar import kgrammar
from karel.krunner import krunner
from karel.kworld import kworld
from karel.kutil import KarelException
from karelapan import settings

VERSION = '1.0'
FECHA = 'Junio 2013'

logging.basicConfig(filename=settings.LOGFILE, level=settings.LOG_LEVEL, format=settings.LOG_FORMAT)

def info():
    print """
Kareld - El demonio evaluador de karel %s (%s)

Uso:
kareld [argumentos [más argumentos]]

Argumentos:
    start           Arranca el demonio de karel (si no está corriendo)
    stop            Detiene el demonio
    restart         Reinicia el demonio
    reload          Lo mismo que el de arriba
    wasap           Indica el estado (corriendo o detenido) del demonio

Adicional:
    --debug         Originalmente el demonio de karel manda stdout y
                    stderr a /dev/null, debug evita este comportamiento
                    y manda ambas salidas a la salida estándar.
    --version       Muestra la versión de kareld
    --help          Muestra esta ayuda

Las configuraciones de kareld están en '%s'
"""%(VERSION, FECHA, settings.__file__)

def main():
    connection = psycopg2.connect("dbname=%s user=%s password=%s"%(settings.DATABASES['default']['NAME'], settings.DATABASES['default']['USER'], settings.DATABASES['default']['PASSWORD']))
    cursor = connection.cursor(cursor_factory=DictCursor)
    logging.debug('Demonio iniciado')
    while True:
        cursor.execute("SELECT * FROM evaluador_envio WHERE estatus='P' ORDER BY concurso_id,hora ASC LIMIT 1")
        envio = cursor.fetchone() #El envío a calificar
        if envio is not None:
            cursor.execute("UPDATE evaluador_envio SET estatus='S' WHERE id='%d'"%envio['id'])
            connection.commit()#Nos aseguramos de marcar este envio y evitar que otra llamada del evaluador lo revise
            cursor.execute("SELECT * FROM evaluador_problema WHERE id='%d'"%envio['problema_id'])
            problema = cursor.fetchone() #El problema
            cursor.execute("SELECT * FROM usuarios_perfil WHERE usuario_id='%d'"%envio['usuario_id'])
            perfil = cursor.fetchone() #El problema
            resultado = { #Almacena el resultado de esta ejecución
                "resultado": "OK", #puede ser ERROR_COMPILACION Ó CASOS_INCOMPLETOS
                "mensaje": "Ejecución terminada",
                "casos": [],
                "puntaje": 0,
                "total": 0,
                "efectividad": 0.0,
                "tiempo_ejecucion": 0
            }
            archivomundo = settings.MEDIA_ROOT+'casos/'+problema['casos_de_evaluacion']
            f = file(archivomundo)
            kec = json.load(f) #Tenemos el archivo de condiciones de evaluacion cargado.
            arch = envio['codigo_archivo'] #Programa a evaluar
            try:
                grammar = kgrammar(flujo=open(arch), archivo=arch, strict=True,futuro=problema['futuro'], strong_logic=problema['logica_fuerte'])
            except KarelException, ke:
                resultado['mensaje'] = "El archivo tiene errores: %s"%ke[0]
                resultado['resultado'] = "ERROR_COMPILACION"
            else:
                try:
                    grammar.verificar_sintaxis() #Pedimos que genere el arbol de instrucciones
                    grammar.expandir_arbol()
                except KarelException, ke:
                    resultado['mensaje'] = "El archivo tiene errores: %s cerca de la linea %d"%(ke[0], grammar.obtener_linea_error())
                    resultado['resultado'] = "ERROR_COMPILACION"
                else:
                    t_inicio = time.time()
                    puntaje = 0
                    num_caso = 0
                    suma_puntos = 0
                    for caso in kec['casos']:
                        num_caso += 1
                        mun = kworld(filas=caso['mundo']['dimensiones']['filas'], columnas=caso['mundo']['dimensiones']['columnas'], karel_pos=tuple(caso['mundo']['karel']['posicion']), orientacion=caso['mundo']['karel']['orientacion'], mochila=caso['mundo']['karel']['mochila'])
                        mun.carga_casillas(caso['mundo']['casillas'])

                        limite_recursion = problema['limite_recursion']
                        limite_iteracion = problema['limite_iteracion']
                        limite_ejecucion = problema['limite_ejecucion']

                        runner = krunner(
                            grammar.ejecutable,
                            mundo=mun,
                            limite_recursion=limite_recursion,
                            limite_iteracion=limite_iteracion,
                            limite_ejecucion=limite_ejecucion
                        )
                        runner.run()
                        all_ok = True
                        if runner.estado == 'OK':
                            if caso['resultado'].has_key('karel'):
                                #Debemos buscar la posicion de karel o su mochila
                                if caso['resultado']['karel'].has_key('posicion'):
                                    #verificamos la posicion
                                    if tuple(caso['resultado']['karel']['posicion']) != runner.mundo.mundo['karel']['posicion']:
                                        all_ok = False
                                        runner.mensaje = 'La posicion de Karel es incorrecta'
                                if caso['resultado']['karel'].has_key('orientacion'):
                                    #verificamos la posicion
                                    if caso['resultado']['karel']['orientacion'] != runner.mundo.mundo['karel']['orientacion']:
                                        all_ok = False
                                        runner.mensaje = 'La orientacion de Karel es incorrecta'
                                if caso['resultado']['karel'].has_key('mochila'):
                                    #verificamos la posicion
                                    if caso['resultado']['karel']['mochila'] != runner.mundo.mundo['karel']['mochila']:
                                        all_ok = False
                                        runner.mensaje = 'La cantidad de zumbadores en la mochila de Karel es incorrecta'
                            if caso['resultado'].has_key('casillas'):
                                for casilla in caso['resultado']['casillas']:
                                    fila, columna = casilla['fila'], casilla['columna']
                                    if runner.mundo.mundo['casillas'].has_key((fila, columna)):
                                        if runner.mundo.mundo['casillas'][(fila, columna)]['zumbadores'] != casilla['zumbadores']:
                                            all_ok = False
                                            runner.mensaje = 'La cantidad de zumbadores en el mundo es incorrecta!'
                                            break
                                    elif casilla['zumbadores'] != 0:
                                        all_ok = False
                                        runner.mensaje = 'La cantidad de zumbadores en el mundo es incorrecta!'
                                        break
                            if all_ok:
                                puntaje += int(caso['puntaje'])
                            else:
                                runner.estado = 'ERROR'
                                resultado['resultado'] = "CASOS_INCOMPLETOS"
                                resultado['mensaje'] = "Tu codigo no funciona en todos los casos"
                        else:
                            all_ok = False
                            resultado['resultado'] = "CASOS_INCOMPLETOS"
                            resultado['mensaje'] = 'Tu codigo no funciona en todos los casos'
                        suma_puntos += int(caso['puntaje'])
                        resultado['casos'].append({
                            "terminacion": runner.estado,
                            "mensaje": runner.mensaje,
                            "puntos": caso['puntaje'],
                            "obtenidos": [0, caso['puntaje']][all_ok]
                        })
                    t_fin = time.time()
                    resultado['puntaje'] = puntaje
                    resultado['total'] = suma_puntos
                    resultado['efectividad'] = puntaje/float(suma_puntos)
                    resultado['tiempo_ejecucion'] = int((t_fin-t_inicio)*1000)
            if resultado['resultado'] == 'OK' and not envio['concurso_id']: #La evaluación es buena, el usuario incremeta problemas resueltos y el problema veces resuelto.
                #Si se trata de un concurso se trata distinto
                cursor.execute('UPDATE usuarios_perfil SET problemas_resueltos=problemas_resueltos+1 WHERE id=%s', (perfil['id'], ))
                connection.commit()
                if problema['mejor_tiempo'] == -1 or resultado['tiempo_ejecucion'] < problema['mejor_tiempo']:
                    cursor.execute('UPDATE evaluador_problema SET veces_resuelto=veces_resuelto+1, mejor_tiempo = %s WHERE id=%s', (resultado['tiempo_ejecucion'], envio['problema_id']))
                else:
                    cursor.execute('UPDATE evaluador_problema SET veces_resuelto=veces_resuelto+1 WHERE id=%s', (envio['problema_id'], ))
                connection.commit()
            cursor.execute("UPDATE evaluador_envio SET estatus='E', puntaje=%s, tiempo_ejecucion=%s, resultado=%s, mensaje=%s, casos=%s WHERE id=%s", (
                resultado['puntaje'],
                resultado['tiempo_ejecucion'],
                resultado['resultado'],
                resultado['mensaje'],
                json.dumps(resultado['casos']),
                envio['id']
            ))
            if envio['concurso_id']:
                cursor.execute("select actualiza_puntaje_concurso(%d, %d)"%(envio['usuario_id'], envio['concurso_id']))
            else:
                cursor.execute("select actualiza_puntaje(%d)"%envio['usuario_id'])
            connection.commit()
            if envio['concurso_id']:
                logging.debug("Evalué un código con el id %d para el problema %d enviado por el usuario %d (concurso %d)"%(envio['id'], envio['problema_id'], envio['usuario_id'], envio['concurso_id']))
            else:
                logging.debug("Evalué un código con el id %d para el problema %d enviado por el usuario %d"%(envio['id'], envio['problema_id'], envio['usuario_id']))
        else:
            time.sleep(1)
    cursor.close()
    connection.close()

if __name__ == '__main__':
    if '--help' in sys.argv or '-h' in sys.argv:
        info()
    elif '--version' in sys.argv or '-v' in sys.argv:
        print '%s %s'%(VERSION, FECHA)
    elif 'start' in sys.argv:
        print 'Arrancando...'
        daemonize.start(main, '--debug' in sys.argv)
        print 'Arrancado'
    elif 'stop' in sys.argv:
        print 'Deteniendo...'
        daemonize.stop()
        logging.debug('Demonio detenido')
        print 'Detenido'
    elif 'restart' in sys.argv or 'reload' in sys.argv:
        print 'Deteniendo...'
        daemonize.stop()
        print 'Listo, ahora arrancando...'
        logging.debug('Demonio reiniciado')
        daemonize.start(main, '--debug' in sys.argv)
        print 'Listo'
    elif 'wasap' in sys.argv:
        daemonize.wasap()
    else:
        print 'El demonio evaluador de Karel'
        print '\tuso: start|stop|reload|restart'
        print 'Vea kareld --help para más información'
